{
  "openapi": "3.0.1",
  "info": {
    "title": "Shipmondo",
    "description": "This is the official API for Shipmondo. The current version is v3.\n\nWe recommend new implementations should be based on this version.\n\nThe API provides multiple endpoints to Shipmondo. You need to have a credential, which consists of an API username and API key.\n\nYou can achieved them through a Shipmondo account, under the Settings page.\n\nThe credential must be passed through every request by using HTTP Basic Authentication technique.\n\nShould we introduce any new changes in the API which will break the structure of any existing API calls, these new changes will be introduced in a new version. This ensures that any systems which integrates up against our system will not be affected.\n\nThe older API V2 is still being supported but no longer extended. Documentation: https://api.pakkelabels.dk/v2/\n\nWe provide an official library for PHP: https://github.com/shipmondo/shipmondo_php_sdk\n",
    "contact": {
      "email": "support@shipmondo.com"
    },
    "version": "3.0.0"
  },
  "servers": [
    {
      "url": "https://app.shipmondo.com/api/public/v3"
    }
  ],
  "tags": [
    {
      "name": "authentication",
      "description": "Authentication"
    },
    {
      "name": "account",
      "description": "Account"
    },
    {
      "name": "products",
      "description": "Shipping Products"
    },
    {
      "name": "service_points",
      "description": "Service Points"
    },
    {
      "name": "imported_shipments",
      "description": "Imported Shipments"
    },
    {
      "name": "shipments",
      "description": "Shipments"
    },
    {
      "name": "pickup_points",
      "description": "Pickup Points"
    },
    {
      "name": "print_client",
      "description": "Print Client"
    },
    {
      "name": "shipment_monitor",
      "description": "Shipment Monitor"
    },
    {
      "name": "return_portals",
      "description": "Return Portals"
    },
    {
      "name": "labels",
      "description": "Labels"
    },
    {
      "name": "quotes",
      "description": "Quotes"
    },
    {
      "name": "carriers",
      "description": "Carriers"
    },
    {
      "name": "shipment_templates",
      "description": "Shipment Templates"
    },
    {
      "name": "payment_gateways",
      "description": "Payment Gateways"
    },
    {
      "name": "sales_orders",
      "description": "Sales Orders"
    },
    {
      "name": "items",
      "description": "Items"
    },
    {
      "name": "sales_order_packaging",
      "description": "Sales Order Packaging"
    },
    {
      "name": "bookkeeping_integrations",
      "description": "Bookkeeping Integrations"
    },
    {
      "name": "documents",
      "description": "Documents"
    },
    {
      "name": "cmr_waybills",
      "description": "CMR Waybills"
    },
    {
      "name": "pickup_requests",
      "description": "Pickup Requests"
    },
    {
      "name": "pick_lists",
      "description": "Pick Lists"
    },
    {
      "name": "webhooks",
      "description": "Webhooks"
    }
  ],
  "paths": {
    "/account/balance": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get current balance",
        "description": "Get current balance for the account\n",
        "operationId": "account_balance_get",
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "number",
                      "example": 1000.5
                    },
                    "currency_code": {
                      "type": "string",
                      "example": "DKK"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2017-06-19T00:00:00+02:00"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/account/payment_requests": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get payment requests",
        "description": "Get payment requests\n",
        "operationId": "payment_requests_get",
        "parameters": [
          {
            "name": "created_at_min",
            "in": "query",
            "description": "From timestamp for the payment requests that need to be considered for filter. Examples:\n* 2017-06-19T11:00:03.305+02:00\n* 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_max",
            "in": "query",
            "description": "To timestamp for the payment requests that need to be considered for filter. Examples:\n* 2017-06-29T11:00:03.305+02:00\n* 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment Request"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get available products",
        "description": "Gets the products and services\n\nAll of available products are returned. If the user is trying to create a shipment with a product not available for their accout, error will occur.\n\nThe code of the products and services are required when creating a shipment.\n",
        "operationId": "products_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the product that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "available",
            "in": "query",
            "description": "Filter for whether or not the product is available for the user",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "product_code",
            "in": "query",
            "description": "Code for the product that need to be considered for filter\n\nExamples: GLSDK_SD, PDK_MH, DAO_P etc.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sender_country_code",
            "in": "query",
            "description": "Country code (ISO Alpha-2) of the sender country that need to be considered for filter.\n\nExamples: DK, SE, DE, etc.\n",
            "schema": {
              "type": "string",
              "default": "DK"
            }
          },
          {
            "name": "receiver_country_code",
            "in": "query",
            "description": "Country code (ISO Alpha-2) of the receiver country that need to be considered for filter.\n\nExamples: DK, SE, DE, etc.\n",
            "schema": {
              "type": "string",
              "default": "DK"
            }
          },
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that need to be considered for filter\n\nExamples: bring, dao, dfm, dhl_express, dsv, gls, pdk, xpressen, brink\n",
            "schema": {
              "type": "string",
              "default": "gls",
              "enum": [
                "bring",
                "dao",
                "dfm",
                "dhl_express",
                "dsv",
                "gls",
                "pdk",
                "xpressen",
                "ups",
                "brink"
              ]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipping Product"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/package_types": {
      "get": {
        "tags": [
          "package_types"
        ],
        "summary": "Get available package types for carrier product",
        "description": "Gets the package types for a product.\n\nAll of available package types are returned for the giving product.\n\nThe code of the package type is used when giving parcels in the creation of shipments.\n",
        "operationId": "package_types_get",
        "parameters": [
          {
            "name": "product_code",
            "in": "query",
            "description": "Code for the product that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Package Type"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipments": {
      "get": {
        "tags": [
          "shipments"
        ],
        "summary": "Get Shipments",
        "description": "Gets the shipments for the user.\n",
        "operationId": "shipments_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the shipment that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "description": "Order ID for the shipments that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "package_number",
            "in": "query",
            "description": "Package number for the shipments that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that need to be considered for filter\n\nExamples: bring, dao, dfm, dhl_express, gls, pdk, brink\n",
            "schema": {
              "type": "string",
              "enum": [
                "bring",
                "dao",
                "dfm",
                "dhl_express",
                "gls",
                "pdk",
                "xpressen",
                "brink"
              ]
            }
          },
          {
            "name": "receiver_country",
            "in": "query",
            "description": "Country code (ISO Alpha-2) that need to be considered for filter.\n\nExamples: DK, SE, DE, etc.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at_min",
            "in": "query",
            "description": "From timestamp for the shipments that need to be considered for filter. Examples:\n* 2017-06-19T11:00:03.305+02:00\n* 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_max",
            "in": "query",
            "description": "To timestamp for the shipments that need to be considered for filter. Examples:\n* 2017-06-29T11:00:03.305+02:00\n* 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "shipments"
        ],
        "summary": "Create a new Shipment",
        "description": "Create a new shipment.\n",
        "operationId": "shipments_post",
        "requestBody": {
          "description": "Shipment Object.\n\nFor some carriers, a simple model can be used while for others a more advanced model needs to be used.\n\nExamples for the advanced model can be found in the Models section.\n\nThis request sample is based on the simple model.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create Shipment Request Simple"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/shipments/{id}": {
      "get": {
        "tags": [
          "shipments"
        ],
        "summary": "Get Shipment with specific ID",
        "description": "Gets the shipment with specific ID for the user.\n",
        "operationId": "shipment_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the shipment that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipments/{id}/labels": {
      "get": {
        "tags": [
          "shipments"
        ],
        "summary": "Get Labels for Shipment with specific ID",
        "description": "Gets labels for the shipment with specific ID. Labels are delivered as Base64 encoded data.\n",
        "operationId": "shipment_labels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the shipment that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "label_format",
            "in": "query",
            "description": "Format for the labels. Available: a4_pdf, 10x19_pdf, png, zpl\n",
            "schema": {
              "type": "string",
              "enum": [
                "a4_pdf",
                "10x19_pdf",
                "png",
                "zpl"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipments/{id}/proforma_invoices": {
      "get": {
        "tags": [
          "shipments"
        ],
        "summary": "Get Proforma Invoices for Shipment with specific ID",
        "description": "Gets proforma invoices for the shipment with specific ID. Proforma Invoices are generated based on the Customs data received and delivered as Base64 encoded data. Only necessary to use when Paperless Trade is not available.\n",
        "operationId": "proforma_invoices_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the shipment that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Proforma Invoice"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipments/{id}/waybills": {
      "get": {
        "tags": [
          "shipments"
        ],
        "summary": "Get Waybills for Shipment with specific ID",
        "description": "Gets waybills for the shipment with specific ID. Waybills are carrier specific and compared to collected waybills these only cover one shipment. Only Danske Fragtmænd supports this at the moment when \"INCL_WAYBILL\" services is booked.\n",
        "operationId": "shipment_waybill_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the shipment that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipments/{id}/cancel_at_carrier": {
      "put": {
        "tags": [
          "shipments"
        ],
        "summary": "Cancel TA shipment at carrier, with specific ID",
        "description": "Cancels TA shipment at carrier if possible. Note that this doesn't refunds the shipment in Shipmondo. Currently supported carriers are: dao, FedEx, Brink Transport and Danske Fragtmænd.\n",
        "operationId": "shipment_cancel_at_carrier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the shipment that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shipment Cancelled"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/cmr_waybills": {
      "get": {
        "tags": [
          "cmr_waybills"
        ],
        "summary": "Get CMR waybills",
        "description": "Gets the CMR waybills for the user (excluding Base64 PDF).\n",
        "operationId": "cmr_waybills_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the CMR waybill that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reference",
            "in": "query",
            "description": "Reference for the CMR waybill that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that need to be considered for filter\n\nExamples: bring\n",
            "schema": {
              "type": "string",
              "enum": [
                "bring"
              ]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CMR Waybill No Base64"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "cmr_waybills"
        ],
        "summary": "Create a new CMR waybill and associated routing label shipments",
        "description": "Create a new CMR waybill and associated routing label shipments\n",
        "operationId": "cmr_waybills_post",
        "requestBody": {
          "description": "CMR Waybill Object.<br> <strong>Note</strong>; loading (except date) and delivery is optional.<br> If not all fields are giving, loading will be overwritten by receiver (except date) and delivery will be overwritten by sender.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create CMR Waybill Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CMR Waybill"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/cmr_waybills/{id}": {
      "get": {
        "tags": [
          "cmr_waybills"
        ],
        "summary": "Get CMR Waybill (including Base64 PDF) with specific ID",
        "description": "Gets the CMR waybill with specific ID for the user. The response include the Base64 for the CMR waybill PDF\n",
        "operationId": "cmr_waybills_show",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the CMR waybill that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CMR Waybill"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/imported_shipments": {
      "get": {
        "tags": [
          "imported_shipments"
        ],
        "summary": "Get Imported Shipments",
        "description": "Gets the imported shipments for the user.\n",
        "operationId": "imported_shipments_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the imported shipment that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "description": "Order ID for the imported shipment that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at_min",
            "in": "query",
            "description": "From timestamp for the imported shipments that need to be considered for filter. Examples:\n* 2017-06-19T11:00:03.305+02:00\n* 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_max",
            "in": "query",
            "description": "To timestamp for the imported shipments that need to be considered for filter. Examples:\n* 2017-06-29T11:00:03.305+02:00\n* 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Imported Shipment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "imported_shipments"
        ],
        "summary": "Create a new Imported Shipment",
        "description": "Create a new imported shipment. The imported shipment can be used to generate shipment through our Web App later.\n",
        "operationId": "imported_shipments_post",
        "requestBody": {
          "description": "Imported Shipment Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create Imported Shipment Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imported Shipment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/imported_shipments/{id}": {
      "get": {
        "tags": [
          "imported_shipments"
        ],
        "summary": "Get Imported Shipment with specific ID",
        "description": "Gets the imported shipments for the user.\n",
        "operationId": "imported_shipment_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the imported shipment that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imported Shipment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "imported_shipments"
        ],
        "summary": "Update an existing Imported Shipment",
        "description": "Updating an existing imported shipment. The imported shipment can be used to generate shipment through our Web App later.\n",
        "operationId": "imported_shipment_put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the imported shipment that need to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Update Imported Shipment Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create Imported Shipment Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imported Shipment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "imported_shipments"
        ],
        "summary": "Delete/archive an existing Imported Shipment",
        "description": "The shipment will be marked as archived and will no longer be visible in our Web App.\n",
        "operationId": "imported_shipment_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the imported shipment that need to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Imported Shipment"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/pickup_points": {
      "get": {
        "tags": [
          "pickup_points"
        ],
        "summary": "Get available & nearest pickup points",
        "description": "Get the available & nearest pickup points based on input.\n\nThe identification of the pickup points can be used/required when creating a shipment.\n",
        "operationId": "pickup_points_get",
        "parameters": [
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that need to be considered for filter\n\nAvailable values: bring, dao, db_schenker_se, gls, pdk, ups, dhl_parcel, dhl_freight_se\n",
            "required": true,
            "schema": {
              "type": "string",
              "default": "gls",
              "enum": [
                "bring",
                "dao",
                "db_schenker_se",
                "dhl_parcel",
                "gls",
                "pdk",
                "gls_pl",
                "ups"
              ]
            }
          },
          {
            "name": "country_code",
            "in": "query",
            "description": "Country code (ISO Alpha-2) that need to be considered for filter.\n\nAvailable countries: DK, NO, SE, FI, NL, DE, BE, LU. Default: DK\n",
            "required": true,
            "schema": {
              "type": "string",
              "default": "DK"
            }
          },
          {
            "name": "zipcode",
            "in": "query",
            "description": "ZIP code / Postal code\n",
            "required": true,
            "schema": {
              "type": "string",
              "default": "5000"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "Name of the city. It is recommended to include city with the request to increase the hit accuracy.\n",
            "schema": {
              "type": "string",
              "default": "5000"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "Street address (contains street name and house number)\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the droppoint at shipping agent. Once this field is used, zipcode is no longer mandatory.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Defining how many pickup points are being returned. Default 10. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "collect_points",
            "in": "query",
            "description": "Set as true to get collect points for products like GLS Click&Collect",
            "schema": {
              "type": "boolean",
              "format": "bool",
              "default": false
            }
          },
          {
            "name": "product_code",
            "in": "query",
            "description": "Used to i.e. determine whether to return postfiliale (default) or packstations for DHL Parcel.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service Point"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "Get webhooks",
        "description": "Get a list of webhooks available for the user.\n",
        "operationId": "webhooks_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id of the webhook object\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the webhook\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "The current active status of the webhook\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created_at_min",
            "in": "query",
            "description": "From timestamp for the webhooks that need to be considered for filter. Examples:\n* 2017-06-19T11:00:03.305+02:00\n* 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_max",
            "in": "query",
            "description": "To timestamp for the webhooks that need to be considered for filter. Examples:\n* 2017-06-29T11:00:03.305+02:00\n* 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_at_min",
            "in": "query",
            "description": "From updated-timestamp for the webhooks that need to be considered for filter. Examples:\n* 2018-06-19T11:00:03.305+02:00\n* 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_at_max",
            "in": "query",
            "description": "To updated-timestamp for the webhooks that need to be considered for filter. Examples:\n* 2018-06-29T11:00:03.305+02:00\n* 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Create a new webhook",
        "description": "Creates a new webhook with the specified information and activates it.\n\nEndpoint must be set up to receive messages before creating the webhook.\n\nAccepted values for action depends on the resource_name used:\nAvailable actions for Shipments resource: create, cancel.\n\nAvailable actions for Orders resource: create, status_update, create_fulfillment, create_shipment, payment_captured, payment_voided, delete.\n\nAvailable actions for Drafts resource: create, create_shipment, delete.\n",
        "operationId": "webhook_create",
        "requestBody": {
          "description": "Webhook Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook Create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "Get Webhook with specific ID",
        "description": "Gets the webhook with the specified ID for the user.\n",
        "operationId": "webhook_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the webhook that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "webhooks"
        ],
        "summary": "Update the specified webhook for the user",
        "description": "Updates the webhook with the specified ID for the user using the request body.\n\nCurrently only supports updating name and active status.\n",
        "operationId": "webhook_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the webhook that is to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "New name of the webhook\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "New active status of the webhook\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Delete the specified webhook for the user",
        "description": "Delete the webhook with the specified ID\n",
        "operationId": "webhook_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the webhook that is to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipment_monitor_statuses": {
      "get": {
        "tags": [
          "shipment_monitor"
        ],
        "summary": "Get shipment monitor statuses",
        "description": "Get shipment monitor statues for specific shipments. Limit: 100 shipment ID's per request.\n",
        "operationId": "shipment_monitor_statuses_get",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "A list of shipment ID's that you want to fetch shipment monitor statuses for. Examples 10075,10076,10077\n",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment Monitor Status"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipment_monitor_details": {
      "get": {
        "tags": [
          "shipment_monitor"
        ],
        "summary": "Get shipment monitor details",
        "description": "Get shipment monitor details for specific shipments. Limit: 100 shipment ID's per request.\n",
        "operationId": "shipment_monitor_details_get",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "A list of shipment ID's that you want to fetch shipment monitor details for. Examples 10075,10076,10077\n",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment Monitor Details"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/printers": {
      "get": {
        "tags": [
          "print_client"
        ],
        "summary": "Get printers for the current account",
        "description": "Get printers\n",
        "operationId": "printers_get",
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Printer"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/print_jobs": {
      "post": {
        "tags": [
          "print_client"
        ],
        "summary": "Create a print job",
        "description": "Get printers\n",
        "operationId": "print_jobs_post",
        "requestBody": {
          "description": "Sales Order Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Print Job"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Print Job"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/pick_lists": {
      "get": {
        "tags": [
          "pick_lists"
        ],
        "summary": "Get pick lists with specified IDs",
        "description": "Get pick lists for specific sales orders with specified IDs. Limit: 25 Sales Order ID's per request.\n",
        "operationId": "pick_list_get",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "A list of sales order ID's that you want to fetch pick lists for. Examples 10075,10076,10077\n",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "output_format",
            "in": "query",
            "description": "Format for the pick lists. Available: a4_pdf, 10x19_pdf\n",
            "schema": {
              "type": "string",
              "enum": [
                "a4_pdf",
                "10x19_pdf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pick List"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/packing_slips": {
      "get": {
        "tags": [
          "packing_slips"
        ],
        "summary": "Get packing slips with specified Sales Order IDs",
        "description": "Get packing slips for specific sales orders with specified IDs. Limit: 25 Sales Order ID's per request.\n",
        "operationId": "packing_slip_get",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "A list of sales order ID's that you want to fetch packing slips for. Examples 10075,10076,10077\n",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "output_format",
            "in": "query",
            "description": "Format for the packing slips. Available: a4_pdf, 10x19_pdf\n",
            "schema": {
              "type": "string",
              "enum": [
                "a4_pdf",
                "10x19_pdf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Packing Slip"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/return_portals": {
      "get": {
        "tags": [
          "return_portals"
        ],
        "summary": "Get return portals",
        "description": "Get return portals for the user.\n",
        "operationId": "return_portals_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the return portal that needs to be acquired",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filters for whether or not the return portal is active",
            "schema": {
              "type": "boolean",
              "format": "bool"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 10. Max 25.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return Portals"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/return_portals/{id}": {
      "get": {
        "tags": [
          "return_portals"
        ],
        "summary": "Get Return Portal with specific ID",
        "description": "Gets the return portal with the specified ID for the user.\n",
        "operationId": "return_portal_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the return portal that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return Portal"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/return_portals/{id}/shipments": {
      "get": {
        "tags": [
          "return_portals"
        ],
        "summary": "Get Shipments for Return Portal with specific ID",
        "description": "Gets shipments for the return portal with the specified ID.\n",
        "operationId": "return_portals_shipments_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the return portal that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "description": "Order ID for the shipments that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "package_number",
            "in": "query",
            "description": "Package number for the shipments that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that need to be considered for filter\n\nExamples: bring, dao, dfm, dhl_express, gls, pdk\n",
            "schema": {
              "type": "string",
              "enum": [
                "bring",
                "dao",
                "dfm",
                "dhl_express",
                "gls",
                "pdk",
                "xpressen"
              ]
            }
          },
          {
            "name": "receiver_country",
            "in": "query",
            "description": "Country code (ISO Alpha-2) that need to be considered for filter.\n\nExamples: DK, SE, DE, etc.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at_min",
            "in": "query",
            "description": "From timestamp for the shipments that need to be considered for filter. Examples:\n* 2017-06-19T11:00:03.305+02:00\n* 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_max",
            "in": "query",
            "description": "To timestamp for the shipments that need to be considered for filter. Examples:\n* 2017-06-29T11:00:03.305+02:00\n* 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/labels": {
      "get": {
        "tags": [
          "labels"
        ],
        "summary": "Get labels with specified IDs",
        "description": "Get labels for specific shipments with specified IDs. Limit: 25 shipment ID's per request.\n",
        "operationId": "labels_get",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "A list of shipment ID's that you want to fetch labels for. Examples 10075,10076,10077\n",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "label_format",
            "in": "query",
            "description": "Format for the labels. Available: a4_pdf, 10x19_pdf, png, zpl\n",
            "schema": {
              "type": "string",
              "enum": [
                "a4_pdf",
                "10x19_pdf",
                "png",
                "zpl"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Labels"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/quotes": {
      "post": {
        "tags": [
          "quotes"
        ],
        "summary": "Get quote for a shipment",
        "description": "Quote for a shipment with specified sender (origin), receiver (destination), product and services\n",
        "operationId": "quotes_post",
        "requestBody": {
          "description": "Quote Object.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create Quote Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Create Quote Response"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/quotes/list": {
      "post": {
        "tags": [
          "quotes"
        ],
        "summary": "Get available quotes for a shipment",
        "description": "Array of available quotes for a shipment with specified sender (origin), receiver (destination).\n",
        "operationId": "quotes/list_post",
        "requestBody": {
          "description": "Quote Objects.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create Quote List Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Create Quote List Response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/carriers": {
      "get": {
        "tags": [
          "carriers"
        ],
        "summary": "Get available carriers",
        "description": "Gets available carriers for the current user.\n",
        "operationId": "carriers_get",
        "parameters": [
          {
            "name": "country_code",
            "in": "query",
            "description": "Country to get carriers for.",
            "required": true,
            "schema": {
              "type": "string",
              "default": "DK"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Carriers"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipment_templates": {
      "get": {
        "tags": [
          "shipment_templates"
        ],
        "summary": "Get Shipment Templates",
        "description": "Gets the shipment templates for the user.\n",
        "operationId": "shipment_templates_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the shipment template that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sender_country",
            "in": "query",
            "description": "Country code (ISO Alpha-2) that need to be considered for filter.\n\nExamples: DK, SE, DE, etc.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiver_country",
            "in": "query",
            "description": "Country code (ISO Alpha-2) that need to be considered for filter.\n\nExamples: DK, SE, DE, etc.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment Template"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/shipment_templates/{id}": {
      "get": {
        "tags": [
          "shipment_templates"
        ],
        "summary": "Get Shipment Template with specific ID",
        "description": "Gets the shipment templates for the user.\n",
        "operationId": "shipment_template_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the shipment template that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shipment Template"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/sales_orders": {
      "get": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Get sales orders",
        "description": "Gets the sales orders for the user.\n",
        "operationId": "sales_orders_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the sales order that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_id",
            "in": "query",
            "description": "Order ID for the sales order that need to be considered for filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Filter for achived or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created_at_min",
            "in": "query",
            "description": "From created-timestamp for the sales orders that need to be considered for filter. Examples:\n* 2018-06-19T11:00:03.305+02:00\n* 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_max",
            "in": "query",
            "description": "To created-timestamp for the sales orders that need to be considered for filter. Examples:\n* 2018-06-29T11:00:03.305+02:00\n* 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_at_min",
            "in": "query",
            "description": "From updated-timestamp for the sales orders that need to be considered for filter. Examples:\n* 2018-06-19T11:00:03.305+02:00\n* 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_at_max",
            "in": "query",
            "description": "To updated-timestamp for the sales orders that need to be considered for filter. Examples:\n* 2018-06-29T11:00:03.305+02:00\n* 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 10. Max 25.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sales Order"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Create a new sales order",
        "description": "Create a new sales order. The sales order can be used to pack, handle, and send shipments through the Shipmondo App.\n",
        "operationId": "sales_orders_post",
        "requestBody": {
          "description": "Sales Order Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create Sales Order Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sales Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/sales_orders/{id}": {
      "get": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Get sales order with specific ID",
        "description": "Gets the sales orders for the user.\n",
        "operationId": "sales_order_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sales Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Update an existing sales order",
        "description": "Updating an existing sales order and its order lines.\n\nId value in order lines is used to identify which order lines should be updated.\nUpdating order lines is exclusively possible with open orders.\n",
        "operationId": "sales_order_put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order that need to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Update Sales Order Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update Sales Order Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sales Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/sales_orders/{id}/pick_list": {
      "get": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Get Pick list for Sales order with specific ID",
        "description": "Gets Pick list for the sales order with specific ID. Pick list is delivered as Base64 encoded data.\n",
        "operationId": "sales_order_pick_list",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Format for the pick list. Available: a4_pdf, 10x19_pdf\n",
            "schema": {
              "type": "string",
              "enum": [
                "a4_pdf",
                "10x19_pdf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pick List Data"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/sales_orders/{id}/packing_slips": {
      "get": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Get Packing slips for Sales order with specific ID",
        "description": "Gets Packing slips for the sales order with specific ID. Packing slips are delivered as Base64 encoded data.\n",
        "operationId": "sales_order_packing_slips",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Format for the pick list. Available: a4_pdf, 10x19_pdf\n",
            "schema": {
              "type": "string",
              "enum": [
                "a4_pdf",
                "10x19_pdf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Packing Slip"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/sales_orders/{id}/create_shipment": {
      "post": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Create shipment for sales order with specified ID",
        "description": "Create shipment for sales order.\n",
        "operationId": "sales_order_create_shipment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order that need to be created shipment for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sales Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/sales_orders/{id}/capture": {
      "post": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Capture payment for sales order with specified ID",
        "description": "Capture payment for sales order.\n",
        "operationId": "sales_order_capture",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order that need to be captured",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sales Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/sales_orders/{id}/order_note": {
      "put": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Update note for sales order with specified ID",
        "description": "Update note for sales order.\n",
        "operationId": "sales_order_update_note",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order that note should be updated for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Sales Order Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update Sales Order Note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sales Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/sales_orders/barcode": {
      "post": {
        "tags": [
          "sales_orders"
        ],
        "summary": "Process sales order barcode",
        "description": "Update note for sales order.\n",
        "operationId": "sales_order_barcode",
        "requestBody": {
          "description": "Sales Order Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Process Sales Order Barcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sales Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/items": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Get items",
        "description": "Get a list of items for the user.\n",
        "operationId": "items_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id of the item\n",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sku",
            "in": "query",
            "description": "SKU of the item\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the item\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "barcode",
            "in": "query",
            "description": "The barcode value of the item\n",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "created_at_min",
            "in": "query",
            "description": "From timestamp for the items that need to be considered for filter. Examples:\n* 2017-06-19T11:00:03.305+02:00\n* 2017-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "created_at_max",
            "in": "query",
            "description": "To timestamp for the items that need to be considered for filter. Examples:\n* 2017-06-29T11:00:03.305+02:00\n* 2017-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_at_min",
            "in": "query",
            "description": "From updated-timestamp for the items that need to be considered for filter. Examples:\n* 2018-06-19T11:00:03.305+02:00\n* 2018-06-19 will be transformed into 2017-06-19T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updated_at_max",
            "in": "query",
            "description": "To updated-timestamp for the items that need to be considered for filter. Examples:\n* 2018-06-29T11:00:03.305+02:00\n* 2018-06-29 will be transformed into 2017-06-29T00:00:00.000+02:00\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "items"
        ],
        "summary": "Create a new item",
        "description": "Creates a new item with the specified information.\n",
        "operationId": "item_create",
        "requestBody": {
          "description": "Item Object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/items/{id}": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Get Item with specific ID",
        "description": "Gets the item with the specified ID for the user.\n",
        "operationId": "item_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the item that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "items"
        ],
        "summary": "Update the specified item for the user",
        "description": "Updates the item with the specified ID for the user using the request body.\n\nUpdating the SKU is not possible\n",
        "operationId": "item_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the item that is to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Update item body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Update Item Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/sales_order_packaging": {
      "get": {
        "tags": [
          "sales_order_packaging"
        ],
        "summary": "Get Sales Order Packaging",
        "description": "Gets the sales order packaging for the user.\n",
        "operationId": "sales_order_packagings_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the sales order packaging that need to be considered for filter",
            "schema": {
              "format": "int32"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sales Order Packaging"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/sales_order_packaging/{id}": {
      "get": {
        "tags": [
          "sales_order_packaging"
        ],
        "summary": "Get Sales Order Packaging with specific ID",
        "description": "Gets the sales order packaging for the user.\n",
        "operationId": "sales_order_packaging_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the sales order packaging that need to be considered for filter",
            "required": true,
            "schema": {
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sales Order Packaging"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/bookkeeping_integrations": {
      "get": {
        "tags": [
          "bookkeeping_integration"
        ],
        "summary": "Get Bookkeeping Integrations",
        "description": "Gets the bookkeeping integrations for the user.\n",
        "operationId": "bookkeeping_integrations_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the bookkeeping integrations that need to be considered for filter",
            "schema": {
              "format": "int32"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Bookkeeping Integration"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/bookkeeping_integrations/{id}": {
      "get": {
        "tags": [
          "bookkeeping_integration"
        ],
        "summary": "Get Bookkeeping Integration with specific ID",
        "description": "Gets the bookkeeping integration for the user.\n",
        "operationId": "bookkeeping_integration_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the bookkeeping integration that need to be considered for filter",
            "required": true,
            "schema": {
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Bookkeeping Integration"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/payment_gateways": {
      "get": {
        "tags": [
          "payment_gateways"
        ],
        "summary": "Get payment gateways",
        "description": "Gets the payment gateways for the user.\n",
        "operationId": "payment_gateways_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the payment gateway that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment Gateway"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/payment_gateways/{id}": {
      "get": {
        "tags": [
          "payment_gateways"
        ],
        "summary": "Get payment gateway with specific ID",
        "description": "Gets the payment gateways for the user.\n",
        "operationId": "payment_gateway_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the payment gateway that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment Gateway"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/documents/end_of_day": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "Get end of day list for a specific carrier",
        "description": "Gets end of day list for a specific carrier.\n",
        "operationId": "end_of_day_get",
        "parameters": [
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that end of day list should be generated for\n\nExamples: bring, dao, dfm, dhl_express, dsv, gls, pdk, xpressen, brink\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bring",
                "dao",
                "dfm",
                "dhl_express",
                "dsv",
                "gls",
                "pdk",
                "xpressen",
                "brink",
                "gls_pl"
              ]
            }
          },
          {
            "name": "from_time",
            "in": "query",
            "description": "From timestamp for the end of day document. Examples:\n* 2018-06-19T11:00:00.305+02:00\n* 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00\n",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to_time",
            "in": "query",
            "description": "To timestamp for the end of day document. Examples:\n* 2018-06-20T11:00:00.305+02:00\n* 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00\n",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/documents/waybill": {
      "get": {
        "tags": [
          "documents"
        ],
        "summary": "Get waybill for i.e. PostNord varebrev",
        "description": "Gets waybill for i.e. PostNord varebrev.\n",
        "operationId": "waybill_get",
        "parameters": [
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that need to be considered for filter\n\nExamples: pdk, deutsche_post, bring\n",
            "schema": {
              "type": "string",
              "default": "pdk",
              "enum": [
                "pdk",
                "deutsche_post",
                "bring"
              ]
            }
          },
          {
            "name": "bag_quantity",
            "in": "query",
            "description": "Quantity of bags to be declared <br> <strong>Note:</strong> <ul> <li>Required for PostNord</li> <li>Required for Deutsche Post, but is only used if an open order is closed</li> <li>Ignored for Bring</li> </ul>",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "container_quantity",
            "in": "query",
            "description": "Quantity of bags to be declared <br> <strong>Note:</strong> <ul> <li>Required for PostNord</li> <li>If used with Deutsche Post it is just added to bag_quantity</li> <li>Ignored for Bring</li> </ul>",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "from_time",
            "in": "query",
            "description": "From timestamp for the waybill document. Examples:\n* 2018-06-19T11:00:00.305+02:00\n* 2018-06-19 will be transformed into 2018-06-19T00:00:00.000+02:00\n",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to_time",
            "in": "query",
            "description": "To timestamp for the waybill document. Examples:\n* 2018-06-20T11:00:00.305+02:00\n* 2018-06-20 will be transformed into 2018-06-20T00:00:00.000+02:00\n",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "product_id",
            "in": "query",
            "description": "Determines the product of the waybill:\n* 1 / none = Varebrev (Legacy)\n* 2 = PostNord Tracked\n* 3 = PostNord Untracked\n",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/pickup_requests": {
      "get": {
        "tags": [
          "pickup_requests"
        ],
        "summary": "Get pickup requests",
        "description": "Gets the pickup requests for the user.\n",
        "operationId": "pickup_requests_get",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID for the pickup request that need to be considered for filter",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "carrier_code",
            "in": "query",
            "description": "Carrier code that need to be considered for filter\n\nExamples: ups, fed_ex, dhl_express\n",
            "schema": {
              "type": "string",
              "enum": [
                "fed_ex",
                "ups",
                "dhl_express"
              ]
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "For pagination. Defining how many entries returned per page. Default 20. Max 50.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "For pagination. Defining which page is the results are fetched from. Default 1.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "headers": {
              "X-Current-Page": {
                "description": "Pagination - Current Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Per-Page": {
                "description": "Pagination - Per Page.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Count": {
                "description": "Pagination - Total Count.",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Total-Pages": {
                "description": "Pagination - Total Pages Count.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pickup Request No Shipments"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "pickup_requests"
        ],
        "summary": "Create a pickup requests and book it at the carrier",
        "description": "Create a pickup requests and book it at the carrier\n",
        "operationId": "pickup_requests_post",
        "requestBody": {
          "description": "Pickup Request object.<br> <strong>Note</strong>; is_residential is only for ups<br> <strong>is_residential</strong>; is the pickup address residential?<br>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Create Pickup Request Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup Request"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          },
          "422": {
            "$ref": "#/definitions/Response 422"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/pickup_requests/{id}": {
      "get": {
        "tags": [
          "pickup_requests"
        ],
        "summary": "Get pickup request with specific ID",
        "description": "Gets the pickup request with specific ID for the user\n",
        "operationId": "pickup_requests_show",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID for the pickup request that need to be considered for filter",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pickup Request"
                }
              }
            }
          },
          "401": {
            "$ref": "#/definitions/Response 401"
          },
          "404": {
            "$ref": "#/definitions/Response 404"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Response 401": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Invalid API User or API Key"
          }
        },
        "description": "Unauthorized."
      },
      "Response 404": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Invalid or not found parameter(s)"
          }
        },
        "description": "Invalid or not found parameter(s)"
      },
      "Response 422": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Invalid or not found parameter(s)"
          }
        },
        "description": "Invalid or not found parameter(s)"
      },
      "Carrier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 7
          },
          "code": {
            "type": "string",
            "example": "gls"
          },
          "name": {
            "type": "string",
            "example": "GLS Denmark"
          }
        }
      },
      "Carriers": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Carrier"
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "DK"
          },
          "name": {
            "type": "string",
            "example": "Denmark"
          },
          "customs_declaration_required": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Shipping Product Service": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EMAIL_NT"
          },
          "id": {
            "type": "integer",
            "example": 21
          },
          "name": {
            "type": "string",
            "example": "Email advisering"
          },
          "required_fields": {
            "type": "string",
            "example": "receiver_email"
          }
        }
      },
      "Shipping Product Services": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Shipping Product Service"
        }
      },
      "Required Shipping Product Service": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "EMAIL_NT"
          },
          "id": {
            "type": "integer",
            "example": 21
          },
          "name": {
            "type": "string",
            "example": "Email advisering"
          },
          "required_fields": {
            "type": "string",
            "example": "receiver_email"
          },
          "note": {
            "type": "string",
            "example": "Email notification is required"
          }
        }
      },
      "Required Shipping Product Services": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Required Shipping Product Service"
        }
      },
      "Weight Interval": {
        "type": "object",
        "properties": {
          "from_weight": {
            "type": "integer",
            "description": "In gram",
            "example": 0
          },
          "to_weight": {
            "type": "integer",
            "description": "In gram",
            "example": 1000
          },
          "description": {
            "type": "string",
            "example": "0-1kg"
          }
        },
        "description": "Public weight intervals available to use. This is not applicable for own agreement or carriers that require full dimensions on parcels."
      },
      "Weight Intervals": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Weight Interval"
        }
      },
      "Shipping Product": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "GLSDK_SD equals GLS (DK) Shop Delivery",
            "example": "GLSDK_SD"
          },
          "id": {
            "type": "integer",
            "example": 19
          },
          "name": {
            "type": "string",
            "example": "Til Pakkeshop"
          },
          "required_fields": {
            "type": "string",
            "example": "service_point_id"
          },
          "available": {
            "type": "boolean",
            "description": "Whether the product is available for the current user to book.",
            "example": true
          },
          "own_agreement_available": {
            "type": "boolean",
            "description": "If own agreement is available for this product.",
            "example": true
          },
          "customs_declaration_required": {
            "type": "boolean",
            "example": true
          },
          "service_point_available": {
            "type": "boolean",
            "example": true
          },
          "service_point_required": {
            "type": "boolean",
            "example": true
          },
          "expected_transit_time": {
            "type": "string",
            "example": "1-2 days"
          },
          "sender_country_code": {
            "type": "string",
            "example": "DK"
          },
          "receiver_country_code": {
            "type": "string",
            "example": "DK"
          },
          "required_parcel_fields": {
            "type": "string",
            "example": "quantity,weight"
          },
          "optional_parcel_fields": {
            "type": "string",
            "example": "height,length,width"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier"
          },
          "destination_country": {
            "$ref": "#/components/schemas/Country"
          },
          "available_services": {
            "$ref": "#/components/schemas/Shipping Product Services"
          },
          "required_services": {
            "$ref": "#/components/schemas/Required Shipping Product Services"
          },
          "weight_intervals": {
            "$ref": "#/components/schemas/Weight Intervals"
          }
        }
      },
      "Shipping Products": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Shipping Product"
        }
      },
      "Package Type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 19
          },
          "code": {
            "type": "string",
            "example": "PL1"
          },
          "description": {
            "type": "string",
            "example": "PL1"
          }
        }
      },
      "Package Types": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Package Type"
        }
      },
      "Imported Shipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 11460
          },
          "sms_notification": {
            "type": "boolean",
            "example": true
          },
          "email_notification": {
            "type": "boolean",
            "example": true
          },
          "order_id": {
            "type": "string",
            "example": "1000002345"
          },
          "reference": {
            "type": "string",
            "example": "Webshop 5678"
          },
          "source": {
            "type": "string",
            "example": "API"
          },
          "carrier_code": {
            "type": "string",
            "example": "gls"
          },
          "product_code": {
            "type": "string",
            "description": "GLSDK_SD equals GLS (DK) Shop Delivery",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "archived": {
            "type": "boolean",
            "example": false
          },
          "label_created": {
            "type": "boolean",
            "example": false
          },
          "shipment_id": {
            "type": "integer",
            "example": 123456
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "service_point": {
            "$ref": "#/components/schemas/Service Point Simple"
          }
        }
      },
      "Create Imported Shipment Request": {
        "type": "object",
        "properties": {
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "service_point": {
            "$ref": "#/components/schemas/Service Point Simple"
          },
          "sms_notification": {
            "type": "boolean",
            "example": true
          },
          "email_notification": {
            "type": "boolean",
            "example": true
          },
          "order_id": {
            "type": "string",
            "example": "1000002345"
          },
          "reference": {
            "type": "string",
            "example": "Webshop 5678"
          },
          "source": {
            "type": "string",
            "example": "API"
          },
          "carrier_code": {
            "type": "string",
            "description": "Can be blank"
          },
          "product_code": {
            "type": "string",
            "description": "Can be blank",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "shipment_template_id": {
            "type": "string",
            "example": "710"
          }
        }
      },
      "Sender": {
        "required": [
          "address1",
          "city",
          "country_code",
          "name",
          "zipcode"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Min Virksomhed ApS"
          },
          "attention": {
            "type": "string",
            "example": "Lene Hansen"
          },
          "address1": {
            "type": "string",
            "example": "Strandvejen 6B"
          },
          "address2": {
            "type": "string"
          },
          "zipcode": {
            "type": "string",
            "example": "5240"
          },
          "city": {
            "type": "string",
            "example": "Odense NØ"
          },
          "country_code": {
            "type": "string",
            "example": "DK"
          },
          "email": {
            "type": "string",
            "example": "info@minvirksomhed.dk"
          },
          "mobile": {
            "type": "string",
            "example": "70400407"
          },
          "telephone": {
            "type": "string",
            "example": "70400407"
          }
        },
        "description": "Required"
      },
      "Receiver": {
        "required": [
          "address1",
          "city",
          "country_code",
          "name",
          "zipcode"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Lene Hansen"
          },
          "attention": {
            "type": "string"
          },
          "address1": {
            "type": "string",
            "example": "Skibhusvej 52"
          },
          "address2": {
            "type": "string"
          },
          "zipcode": {
            "type": "string",
            "example": "5000"
          },
          "city": {
            "type": "string",
            "example": "Odense C"
          },
          "country_code": {
            "type": "string",
            "example": "DK"
          },
          "email": {
            "type": "string",
            "example": "lene@email.dk"
          },
          "mobile": {
            "type": "string",
            "example": "12345678"
          },
          "telephone": {
            "type": "string",
            "example": "12345678"
          },
          "instruction": {
            "type": "string"
          }
        },
        "description": "Required"
      },
      "Pick Up": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Min Virksomhed A/S"
          },
          "address1": {
            "type": "string",
            "example": "Strandvejen 6B"
          },
          "address2": {
            "type": "string",
            "example": "Port 26"
          },
          "country_code": {
            "type": "string",
            "example": "DK"
          },
          "zipcode": {
            "type": "string",
            "example": "5240"
          },
          "city": {
            "type": "string",
            "example": "Odense NØ"
          },
          "attention": {
            "type": "string",
            "example": "Lager"
          },
          "telephone": {
            "type": "string",
            "example": "80808080"
          },
          "instruction": {
            "type": "string",
            "example": "Henvend ved indgang port 21"
          }
        }
      },
      "Goods Line": {
        "required": [
          "commodity_code",
          "content",
          "country",
          "quantity",
          "unit_value",
          "unit_weight"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "example": 2
          },
          "country": {
            "type": "string",
            "description": "Country of origin",
            "example": "CN"
          },
          "content": {
            "type": "string",
            "description": "Description of the content",
            "example": "Textile shirt"
          },
          "commodity_code": {
            "type": "string",
            "description": "Classification numbers for goods. For more visit vita.skat.dk",
            "example": "8471000000"
          },
          "unit_value": {
            "type": "number",
            "description": "Unit value in declared currency",
            "example": 50.75
          },
          "unit_weight": {
            "type": "integer",
            "description": "Unit weight in gram",
            "example": 100
          }
        }
      },
      "Simple Customs": {
        "type": "object",
        "properties": {
          "currency_code": {
            "type": "string",
            "description": "Declared currency code",
            "example": "DKK"
          },
          "goods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Goods Line"
            }
          }
        }
      },
      "Service Point In Shipment Request": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identification for the service point from the carrier",
            "example": "96271"
          }
        }
      },
      "Parcel Simple": {
        "required": [
          "weight"
        ],
        "type": "object",
        "properties": {
          "weight": {
            "type": "integer",
            "description": "Weight in gram",
            "example": 1000
          }
        }
      },
      "Parcel Advanced": {
        "type": "object",
        "properties": {
          "weight": {
            "type": "integer",
            "description": "Weight in gram",
            "example": 1000
          },
          "length": {
            "type": "integer",
            "description": "Length in cm",
            "example": 20
          },
          "width": {
            "type": "integer",
            "description": "Width in cm",
            "example": 10
          },
          "height": {
            "type": "integer",
            "description": "Height in cm",
            "example": 6
          },
          "volume": {
            "type": "number",
            "description": "Volume in cubic metre",
            "example": 0.012
          },
          "running_metre": {
            "type": "number",
            "description": "Running metre in metre",
            "example": 1.25
          },
          "description": {
            "type": "string",
            "example": "Bike accessories"
          },
          "packaging": {
            "type": "string",
            "description": "Packaging type for the parcel, if required, must match value required by the carrier.",
            "example": "PL1"
          }
        }
      },
      "Create Shipment Request Simple": {
        "required": [
          "own_agreement",
          "parcels",
          "product_code",
          "receiver",
          "sender",
          "service_codes"
        ],
        "type": "object",
        "properties": {
          "test_mode": {
            "type": "boolean",
            "description": "For testing purpose. Shipment and labels generated are dummy and cannot be used. To create real shipments, remove this element or set it to be false",
            "example": true
          },
          "own_agreement": {
            "type": "boolean",
            "example": false
          },
          "label_format": {
            "type": "string",
            "description": "If label_format is specified, the shipping labels will be included in the response. Available formats: a4_pdf, 10x19_pdf, png, zpl"
          },
          "product_code": {
            "type": "string",
            "description": "GLSDK_SD equals GLS (DK) Shop Delivery",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "automatic_select_service_point": {
            "type": "boolean",
            "description": "When a delivery method requires specified service point, you can use this to have the system to pick the closest one based on receiver's address.",
            "example": true
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parcel Simple"
            }
          },
          "print": {
            "type": "boolean",
            "description": "For using with the print client. Shipment labels can be sent out to the print queue automatically. Possible to specify which host name, printer name and label format in print_at element.",
            "example": false
          },
          "print_at": {
            "$ref": "#/components/schemas/Print At"
          },
          "send_label": {
            "$ref": "#/components/schemas/Send Label"
          },
          "replace_http_status_code": {
            "type": "boolean",
            "description": "If replace_http_status_code is set to true, request will have HTTP Status 200, the real HTTP Status will be included in the response header as X-HTTP-Status-Code. This is for preventing Run Time Error in some frameworks and make it possible to read the error messages.",
            "example": false
          },
          "reference": {
            "type": "string",
            "description": "Reference can be printed on the label and transferred to e.g. carriers.",
            "example": "Order 10001"
          },
          "pallet_exchange": {
            "$ref": "#/components/schemas/Pallet Exchange"
          }
        }
      },
      "Create Shipment Request Simple With Service Point": {
        "required": [
          "own_agreement",
          "parcels",
          "product_code",
          "receiver",
          "sender",
          "service_codes"
        ],
        "type": "object",
        "properties": {
          "test_mode": {
            "type": "boolean",
            "description": "For testing purpose. Shipment and labels generated are dummy and cannot be used. To create real shipments, remove this element or set it to be false",
            "example": true
          },
          "own_agreement": {
            "type": "boolean",
            "example": false
          },
          "label_format": {
            "type": "string",
            "description": "If label_format is specified, the shipping labels will be included in the response. Available formats: a4_pdf, 10x19_pdf, png, zpl"
          },
          "product_code": {
            "type": "string",
            "description": "GLSDK_SD equals GLS (DK) Shop Delivery",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "service_point": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the service point.",
                "example": "95558"
              }
            }
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parcel Simple"
            }
          }
        }
      },
      "Pallet Exchange": {
        "type": "object",
        "properties": {
          "pallets1": {
            "type": "integer",
            "description": "The number of 1/1 pallets to exchange",
            "example": 1
          },
          "pallets2": {
            "type": "integer",
            "description": "The number of 1/2 pallets to exchange",
            "example": 0
          },
          "pallets4": {
            "type": "integer",
            "description": "The number of 1/4 pallets to exchange",
            "example": 0
          }
        }
      },
      "Print At": {
        "type": "object",
        "properties": {
          "host_name": {
            "type": "string",
            "description": "Name of the PC / host where the print client is installed.",
            "example": "WAREHOUSE-PC"
          },
          "printer_name": {
            "type": "string",
            "description": "Name of the printer that is registered within the print client.",
            "example": "Zebra Zdesigner GK420D"
          },
          "label_format": {
            "type": "string",
            "description": "The label format that the printer can accept. If Zebra GK420D printer then use zpl. Available: a4_pdf, 10x19_pdf, png, zpl",
            "example": "zpl"
          }
        }
      },
      "Send Label": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the recipient of the label (optional)",
            "example": "Jim"
          },
          "email": {
            "type": "string",
            "description": "Email address of the recipient of the label",
            "example": "jim@minvirksomhed.dk"
          },
          "label_format": {
            "type": "string",
            "description": "The label format that should be attached to the email. Available: a4_pdf, 10x19_pdf",
            "example": "a4_pdf"
          }
        }
      },
      "Create Shipment Advanced": {
        "type": "object",
        "properties": {
          "test_mode": {
            "type": "boolean",
            "description": "For testing purpose. Shipment and labels generated are dummy and cannot be used. To create real shipments, remove this element or set it to be false",
            "example": true
          },
          "own_agreement": {
            "type": "boolean",
            "example": false
          },
          "product_code": {
            "type": "string",
            "description": "DHLE_EW equals DHL Express Express Worldwide",
            "example": "DHLE_EW"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "reference": {
            "type": "string",
            "example": "Webshop 5678"
          },
          "order_id": {
            "type": "string",
            "example": "1000002345"
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "pick_up": {
            "$ref": "#/components/schemas/Pick Up"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parcel Advanced"
            }
          }
        }
      },
      "Shipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1168
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "carrier_code": {
            "type": "string",
            "example": "gls"
          },
          "description": {
            "type": "string",
            "example": "Til Pakkeshop 5,0 kg"
          },
          "product_id": {
            "type": "integer",
            "example": 64
          },
          "services": {
            "type": "string",
            "example": "23, 24"
          },
          "product_code": {
            "type": "string",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "price": {
            "type": "number",
            "example": 42.5
          },
          "reference": {
            "type": "string",
            "example": "Webshop 5678"
          },
          "order_id": {
            "type": "string",
            "example": "1000002345"
          },
          "pkg_no": {
            "type": "string",
            "example": "6064518784"
          },
          "source_id": {
            "type": "string",
            "example": "1000001234"
          },
          "source_type": {
            "type": "string",
            "example": "imported_shipment"
          },
          "receiver": {
            "$ref": "#/components/schemas/Receiver"
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "service_point": {
            "$ref": "#/components/schemas/Service Point Simple"
          },
          "pick_up": {
            "type": "object",
            "properties": {}
          },
          "paperless_trade": {
            "type": "boolean",
            "description": "If the shipment is created with paperless trade, then not necessary to print out physical proforma invoice.",
            "example": false
          },
          "labelless_code": {
            "type": "string",
            "description": "If labelless is supported on the certain shipment by the carrier, then this element will be available with the code that can be written on the parcel.",
            "example": "123-4567-890"
          }
        }
      },
      "Shipment Cancelled": {
        "type": "object",
        "properties": {
          "cancelled_at_carrier": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Packing Slip": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id for sales order",
            "example": 27000
          },
          "packing_slips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Packing Slip Data"
            }
          }
        }
      },
      "Packing Slip Data": {
        "type": "object",
        "properties": {
          "order_fulfillment_id": {
            "type": "integer",
            "description": "The id of the fulfillment",
            "example": 833
          },
          "base64": {
            "type": "string",
            "description": "Data encoded in BASE64 format",
            "example": "JVBERi0xLjMKJf//////AAAAAA..."
          },
          "file_format": {
            "type": "string",
            "description": "File format for the returned data (pdf)",
            "example": "pdf"
          }
        }
      },
      "Pick List": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id for sales order",
            "example": 27000
          },
          "pick_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Pick List Data"
            }
          }
        }
      },
      "Pick List Data": {
        "type": "object",
        "properties": {
          "base64": {
            "type": "string",
            "description": "Data encoded in BASE64 format",
            "example": "JVBERi0xLjMKJf//////AAAAAA..."
          },
          "file_format": {
            "type": "string",
            "description": "File format for the returned data (pdf)",
            "example": "pdf"
          }
        }
      },
      "Label": {
        "type": "object",
        "properties": {
          "base64": {
            "type": "string",
            "description": "Data encoded in BASE64 format",
            "example": "JVBERi0xLjMKJf//////AAAAAA..."
          },
          "file_format": {
            "type": "string",
            "description": "File format for the returned data (pdf, png or zpl)",
            "example": "pdf"
          }
        }
      },
      "Proforma Invoice": {
        "type": "object",
        "properties": {
          "base64": {
            "type": "string",
            "description": "Data encoded in BASE64 format",
            "example": "JVBERi0xLjMKJf//////AAAAAA..."
          },
          "file_format": {
            "type": "string",
            "description": "File format for the returned data (pdf)",
            "example": "pdf"
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "sku": {
            "type": "string",
            "example": "EX-123"
          },
          "name": {
            "type": "string",
            "example": "Example Product"
          },
          "variant_code": {
            "type": "string",
            "example": "40"
          },
          "barcode": {
            "type": "string",
            "example": "1234567891011"
          },
          "bin": {
            "type": "string",
            "example": "123-a"
          },
          "weight": {
            "type": "integer",
            "example": 1000
          },
          "image_url": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "country_code_of_origin": {
            "type": "string",
            "example": "DK"
          },
          "currency_code": {
            "type": "string",
            "example": "DKK"
          },
          "customs_commodity_code": {
            "type": "string",
            "example": "123456"
          },
          "customs_description": {
            "type": "string",
            "example": "Example contents"
          },
          "shop": {
            "type": "string",
            "example": "API"
          },
          "virtual": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Update Item Request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Example Item"
          },
          "variant_code": {
            "type": "string",
            "example": "42"
          },
          "barcode": {
            "type": "string",
            "example": "1234567891011"
          },
          "bin": {
            "type": "string",
            "example": "1-2-A"
          },
          "weight": {
            "type": "integer",
            "example": 1000
          },
          "image_url": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "virtual": {
            "type": "boolean",
            "example": false
          },
          "country_code_of_origin": {
            "type": "string",
            "example": "DK"
          },
          "currency_code": {
            "type": "string",
            "example": "DKK"
          },
          "customs_commodity_code": {
            "type": "string",
            "example": "123456"
          },
          "customs_description": {
            "type": "string",
            "example": "Example description"
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "endpoint": {
            "type": "string",
            "example": "https://example.com/webhook"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "name": {
            "type": "string",
            "example": "Example Name"
          },
          "action": {
            "type": "string",
            "example": "create"
          },
          "resource_name": {
            "type": "string",
            "example": "Shipments"
          }
        }
      },
      "Webhook Create": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Example Name"
          },
          "endpoint": {
            "type": "string",
            "example": "https://example.com/webhook"
          },
          "key": {
            "type": "string",
            "example": "example_key_123"
          },
          "action": {
            "type": "string",
            "example": "create"
          },
          "resource_name": {
            "type": "string",
            "example": "Shipments"
          }
        }
      },
      "Service Point Simple": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "95558"
          },
          "name": {
            "type": "string",
            "example": "Påskeløkkens Købmand"
          },
          "address1": {
            "type": "string",
            "example": "Paaskeløkkevej 11"
          },
          "address2": {
            "type": "string"
          },
          "zipcode": {
            "type": "string",
            "example": "5000"
          },
          "city": {
            "type": "string",
            "example": "Odense C"
          },
          "country_code": {
            "type": "string",
            "example": "DK"
          }
        }
      },
      "Service Point": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "95558"
          },
          "name": {
            "type": "string",
            "example": "Påskeløkkens Købmand"
          },
          "address": {
            "type": "string",
            "example": "Paaskeløkkevej 11"
          },
          "address2": {
            "type": "string"
          },
          "zipcode": {
            "type": "string",
            "example": "5000"
          },
          "city": {
            "type": "string",
            "example": "Odense C"
          },
          "country": {
            "type": "string",
            "example": "DK"
          },
          "distance": {
            "type": "integer"
          },
          "longitude": {
            "type": "number",
            "example": 10.4159
          },
          "latitude": {
            "type": "number",
            "example": 55.4086
          },
          "carrier_code": {
            "type": "string",
            "example": "gls"
          },
          "opening_hours": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Man: 07:30 - 18:00"
            }
          },
          "in_delivery": {
            "type": "boolean",
            "example": true
          },
          "out_delivery": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Service Points": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Service Point"
        }
      },
      "Payment Request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 11460
          },
          "reference": {
            "type": "string",
            "example": "Efterkrav for pakkelabel 16733"
          },
          "line_type": {
            "type": "string",
            "example": "Excess Weight"
          },
          "amount": {
            "type": "number",
            "example": 22.5
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          }
        }
      },
      "Printer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Warehouse Printer 02"
          },
          "hostname": {
            "type": "string",
            "example": "WAREHOUSE-PC-01"
          },
          "printer": {
            "type": "string",
            "example": "GK420D"
          },
          "label_format": {
            "type": "string",
            "example": "zpl"
          },
          "default_printer": {
            "type": "boolean",
            "example": true
          },
          "auto_print": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Print Job": {
        "type": "object",
        "properties": {
          "document_id": {
            "type": "integer",
            "example": 11460
          },
          "document_type": {
            "type": "string",
            "example": "shipment"
          },
          "host_name": {
            "type": "string",
            "example": "WAREHOUSE-PC-01"
          },
          "printer_name": {
            "type": "string",
            "example": "GK420D"
          },
          "label_format": {
            "type": "string",
            "example": "zpl"
          }
        }
      },
      "Shipment Monitor Status": {
        "type": "object",
        "properties": {
          "shipment_id": {
            "type": "integer",
            "example": 11460
          },
          "current_state": {
            "type": "string",
            "example": "PROGRESSING"
          },
          "current_status": {
            "type": "string",
            "example": "EN_ROUTE"
          },
          "current_status_text": {
            "type": "string",
            "example": "Forsendelsen er ankommet til distributionscenter"
          },
          "current_status_registered_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "location": {
            "type": "string",
            "example": "Taulov Pakkecenter"
          },
          "city": {
            "type": "string",
            "example": "Taulov"
          },
          "country_code": {
            "type": "string",
            "example": "DK"
          },
          "carrier_code": {
            "type": "string",
            "example": "gls"
          },
          "carrier_track_id": {
            "type": "string",
            "example": "00157128520000003116"
          },
          "weight": {
            "type": "string",
            "example": "1.0"
          },
          "length": {
            "type": "string",
            "example": "1.0"
          },
          "height": {
            "type": "string",
            "example": "1.0"
          },
          "width": {
            "type": "string",
            "example": "1.0"
          }
        }
      },
      "Shipment Monitor Details": {
        "type": "object",
        "properties": {
          "shipment_id": {
            "type": "integer",
            "example": 11460
          },
          "carrier_code": {
            "type": "string",
            "example": "gls"
          },
          "carrier_track_id": {
            "type": "string",
            "example": "00157128520000003116"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "GENERAL"
                },
                "status_text": {
                  "type": "string",
                  "example": "Forsendelse annulleret"
                },
                "registered_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2017-06-16T08:25:44.557+02:00"
                },
                "location": {
                  "type": "string",
                  "example": "Taulov Pakkecenter"
                },
                "city": {
                  "type": "string",
                  "example": "Taulov"
                },
                "country_code": {
                  "type": "string",
                  "example": "DK"
                }
              }
            }
          }
        }
      },
      "Shipment Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 11460
          },
          "name": {
            "type": "string",
            "example": "GLS Shipments"
          },
          "default": {
            "type": "boolean",
            "example": true
          },
          "product_code": {
            "type": "string",
            "example": "GLSDK_HD"
          },
          "own_agreement": {
            "type": "boolean",
            "example": false
          },
          "sender": {
            "$ref": "#/components/schemas/Shipment Template Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Shipment Template Receiver"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parcel Simple"
            }
          }
        }
      },
      "Shipment Template Sender": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": "DK"
          }
        }
      },
      "Shipment Template Receiver": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string",
            "example": "DK"
          }
        }
      },
      "Sales Order Packaging": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 11460
          },
          "name": {
            "type": "string",
            "example": "Standard Packaging"
          },
          "barcode": {
            "type": "string",
            "example": "AB12345334"
          },
          "weight": {
            "type": "integer",
            "example": 1000
          },
          "length": {
            "type": "integer",
            "example": 10
          },
          "height": {
            "type": "integer",
            "example": 10
          },
          "width": {
            "type": "integer",
            "example": 10
          }
        }
      },
      "Bookkeeping Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 12160
          },
          "name": {
            "type": "string",
            "example": "Testcompany Bookkeeping"
          },
          "platform": {
            "type": "string",
            "example": "e-conomic"
          }
        }
      },
      "Return Portal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 43
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "portal_name": {
            "type": "string",
            "example": "Return Portal"
          },
          "carrier_code": {
            "type": "string",
            "example": "gls"
          }
        }
      },
      "Return Portals": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Return Portal"
        }
      },
      "Labels": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 43
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          }
        }
      },
      "Create Quote Request": {
        "required": [
          "product_code"
        ],
        "type": "object",
        "properties": {
          "product_code": {
            "type": "string",
            "description": "GLSDK_SD equals GLS (DK) Shop Delivery",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "sender": {
            "$ref": "#/components/schemas/Quote Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Quote Receiver"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parcel Advanced"
            }
          }
        }
      },
      "Create Quote Response": {
        "type": "object",
        "properties": {
          "carrier_code": {
            "type": "string",
            "example": "gls"
          },
          "description": {
            "type": "string",
            "example": "Til PakkeShop 0-1 kg"
          },
          "product_code": {
            "type": "string",
            "description": "GLSDK_SD equals GLS (DK) Shop Delivery",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "price": {
            "type": "number",
            "example": 42.5
          },
          "price_before_vat": {
            "type": "number",
            "example": 34
          }
        }
      },
      "Quote Sender": {
        "required": [
          "address1",
          "city",
          "country_code",
          "zipcode"
        ],
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "example": "Strandvejen 6B"
          },
          "address2": {
            "type": "string"
          },
          "zipcode": {
            "type": "string",
            "example": "5240"
          },
          "city": {
            "type": "string",
            "example": "Odense NØ"
          },
          "country_code": {
            "type": "string",
            "example": "DK"
          }
        },
        "description": "Required"
      },
      "Quote Receiver": {
        "required": [
          "address1",
          "city",
          "country_code",
          "zipcode"
        ],
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "example": "Skibhusvej 52"
          },
          "address2": {
            "type": "string"
          },
          "zipcode": {
            "type": "string",
            "example": "5000"
          },
          "city": {
            "type": "string",
            "example": "Odense C"
          },
          "country_code": {
            "type": "string",
            "example": "DK"
          }
        },
        "description": "Required"
      },
      "Create Quote List Request": {
        "type": "object",
        "properties": {
          "sender": {
            "$ref": "#/components/schemas/Quote Sender"
          },
          "receiver": {
            "$ref": "#/components/schemas/Quote Receiver"
          },
          "parcels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parcel Simple"
            }
          }
        }
      },
      "Create Quote List Response": {
        "type": "object",
        "properties": {
          "carrier_code": {
            "type": "string",
            "example": "gls"
          },
          "description": {
            "type": "string",
            "example": "Til PakkeShop 0-1 kg"
          },
          "product_code": {
            "type": "string",
            "description": "GLSDK_SD equals GLS (DK) Shop Delivery",
            "example": "GLSDK_SD"
          },
          "service_codes": {
            "type": "string",
            "example": "EMAIL_NT,SMS_NT"
          },
          "price": {
            "type": "number",
            "example": 42.5
          },
          "price_before_vat": {
            "type": "number",
            "example": 34
          }
        }
      },
      "Sales Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 11227
          },
          "order_id": {
            "type": "string",
            "example": "27000"
          },
          "ordered_at": {
            "type": "string",
            "format": "date-time",
            "example": "2017-06-16T08:25:44.557+02:00"
          },
          "order_status": {
            "type": "string",
            "example": "open"
          },
          "fulfillment_status": {
            "type": "string",
            "example": "authorized"
          },
          "payment_status": {
            "type": "string",
            "example": "unfulfilled"
          },
          "shipped_percent": {
            "type": "integer",
            "example": 0
          },
          "fulfilled_percent": {
            "type": "integer",
            "example": 33
          },
          "archived": {
            "type": "boolean",
            "example": false
          },
          "source_name": {
            "type": "string",
            "example": "Testcompany ApS"
          },
          "order_note": {
            "type": "string",
            "example": "Note"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-16T08:25:44.557+02:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-16T08:25:44.557+02:00"
          },
          "ship_to": {
            "$ref": "#/components/schemas/Receiver"
          },
          "bill_to": {
            "$ref": "#/components/schemas/Sender"
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "payment_details": {
            "$ref": "#/components/schemas/Payment Details"
          },
          "service_point": {
            "$ref": "#/components/schemas/Service Point Simple"
          },
          "order_lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order Line"
            }
          },
          "order_fulfillments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fulfillment"
            }
          }
        }
      },
      "Create Sales Order Request": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "example": "27000"
          },
          "ordered_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-10-17T15:25:44.557+02:00"
          },
          "source_name": {
            "type": "string",
            "example": "Testcompany ApS"
          },
          "order_note": {
            "type": "string",
            "example": "Note"
          },
          "archived": {
            "type": "boolean",
            "example": false
          },
          "shipment_template_id": {
            "type": "string",
            "example": "710"
          },
          "sales_order_packaging_id": {
            "type": "string",
            "example": "11242"
          },
          "bookkeeping_integration_id": {
            "type": "string",
            "example": "241"
          },
          "packing_slip_format": {
            "type": "string",
            "description": "If packing_slip_format is specified, the packing slips will be included in the response. Available formats: a4_pdf, 10x19_pdf"
          },
          "ship_to": {
            "$ref": "#/components/schemas/Receiver"
          },
          "bill_to": {
            "$ref": "#/components/schemas/Sender"
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "payment_details": {
            "$ref": "#/components/schemas/Payment Details"
          },
          "service_point": {
            "$ref": "#/components/schemas/Service Point Simple"
          },
          "order_lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order Line Request"
            }
          }
        }
      },
      "Payment Details": {
        "type": "object",
        "properties": {
          "amount_excluding_vat": {
            "type": "string",
            "example": "1600.0"
          },
          "amount_including_vat": {
            "type": "string",
            "example": "2000.0"
          },
          "authorized_amount": {
            "type": "string",
            "example": "2000.0"
          },
          "currency_code": {
            "type": "string",
            "example": "DKK"
          },
          "vat_amount": {
            "type": "string",
            "example": "400.0"
          },
          "vat_percent": {
            "type": "string",
            "example": "0.25"
          },
          "payment_method": {
            "type": "string",
            "example": "quickpay"
          },
          "transaction_id": {
            "type": "string",
            "example": "123456789"
          },
          "payment_gateway_id": {
            "type": "string",
            "example": "4012"
          }
        }
      },
      "Update Sales Order Note": {
        "type": "object",
        "properties": {
          "order_note": {
            "type": "string",
            "example": "Note"
          }
        }
      },
      "Process Sales Order Barcode": {
        "type": "object",
        "properties": {
          "barcode": {
            "type": "string",
            "example": "QB000000027000"
          }
        }
      },
      "Update Sales Order Request": {
        "type": "object",
        "properties": {
          "shipment_template_id": {
            "type": "string",
            "example": "710"
          },
          "sales_order_packaging_id": {
            "type": "string",
            "example": "10"
          },
          "ship_to": {
            "$ref": "#/components/schemas/Receiver"
          },
          "bill_to": {
            "$ref": "#/components/schemas/Sender"
          },
          "sender": {
            "$ref": "#/components/schemas/Sender"
          },
          "service_point": {
            "$ref": "#/components/schemas/Service Point Simple"
          },
          "order_lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order Line Update"
            }
          },
          "order_status": {
            "type": "string",
            "example": "open"
          },
          "enable_customs": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Order Line": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1234
          },
          "line_type": {
            "type": "string",
            "example": "item"
          },
          "item_name": {
            "type": "string",
            "example": "T-Shirt"
          },
          "quantity": {
            "type": "string",
            "example": "2.0"
          },
          "unit_price_excluding_vat": {
            "type": "string",
            "example": "800.0"
          },
          "discount_amount_excluding_vat": {
            "type": "string",
            "example": "0.0"
          },
          "amount_excluding_vat": {
            "type": "string",
            "example": "1600.0"
          },
          "amount_including_vat": {
            "type": "string",
            "example": "2000.0"
          },
          "vat_amount": {
            "type": "string",
            "example": "400.0"
          },
          "vat_percent": {
            "type": "string",
            "example": "0.25"
          },
          "currency_code": {
            "type": "string",
            "example": "DKK"
          },
          "item_sku": {
            "type": "string",
            "example": "TS001-WH"
          },
          "item_variant_code": {
            "type": "string",
            "example": "White"
          },
          "item_barcode": {
            "type": "string",
            "example": "12345678"
          },
          "item_bin": {
            "type": "string",
            "example": "AB-001"
          },
          "shipped_quantity": {
            "type": "string",
            "example": "0.0"
          },
          "unit_weight": {
            "type": "integer",
            "example": 2000
          },
          "image_url": {
            "type": "string",
            "example": "http://example.com/image"
          }
        }
      },
      "Order Line Request": {
        "type": "object",
        "properties": {
          "line_type": {
            "type": "string",
            "example": "item"
          },
          "item_name": {
            "type": "string",
            "example": "T-Shirt"
          },
          "item_sku": {
            "type": "string",
            "example": "TS001-WH"
          },
          "item_variant_code": {
            "type": "string",
            "example": "White"
          },
          "quantity": {
            "type": "string",
            "example": "2.0"
          },
          "unit_price_excluding_vat": {
            "type": "string",
            "example": "800.0"
          },
          "discount_amount_excluding_vat": {
            "type": "string",
            "example": "0.0"
          },
          "vat_percent": {
            "type": "string",
            "example": "0.25"
          },
          "currency_code": {
            "type": "string",
            "example": "DKK"
          },
          "unit_weight": {
            "type": "integer",
            "example": 2000
          },
          "item_barcode": {
            "type": "string",
            "example": "12345678"
          },
          "item_bin": {
            "type": "string",
            "example": "AB-001"
          },
          "image_url": {
            "type": "string",
            "example": "http://example.com/image"
          }
        }
      },
      "Order Line Update": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1234
          },
          "quantity": {
            "type": "string",
            "example": "2.0"
          },
          "unit_price_excluding_vat": {
            "type": "string",
            "example": "800.0"
          },
          "vat_percent": {
            "type": "string",
            "example": "0.25"
          },
          "unit_weight": {
            "type": "integer",
            "example": 2000
          }
        }
      },
      "Fulfillment": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "27000-1"
          },
          "shipment_id": {
            "type": "integer",
            "example": 14500
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-16T08:25:44.557+02:00"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-16T08:25:44.557+02:00"
          }
        }
      },
      "Payment Gateway": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 5314
          },
          "name": {
            "type": "string",
            "example": "QuickPay 1"
          },
          "provider": {
            "type": "string",
            "example": "quick_pay"
          },
          "merchant_number": {
            "type": "string",
            "example": "12345678"
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "base64": {
            "type": "string",
            "example": "JVBERi0xLjMKJf//////AAAAAA..."
          }
        }
      },
      "CMR Waybill": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 23
          },
          "reference": {
            "type": "string",
            "example": "CS000000000NO"
          },
          "carrier_code": {
            "type": "string",
            "example": "bring"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-16T08:25:44.557+02:00"
          },
          "sender": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            }
          },
          "receiver": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Lene Hansen"
              },
              "address1": {
                "type": "string",
                "example": "Skibhusvej 52"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5000"
              },
              "city": {
                "type": "string",
                "example": "Odense C"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            }
          },
          "loading": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Lene Hansen"
              },
              "address1": {
                "type": "string",
                "example": "Skibhusvej 52"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5000"
              },
              "city": {
                "type": "string",
                "example": "Odense C"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "example": "2019-01-30T14:54:29+01:00"
              }
            }
          },
          "delivery": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            }
          },
          "shipment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 123456
              },
              "label_base64": {
                "type": "string",
                "example": "..."
              }
            }
          },
          "base64": {
            "type": "string",
            "description": "Base64 encoded string of CMR Waybill PDF",
            "example": "..."
          }
        }
      },
      "CMR Waybill No Base64": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 23
          },
          "reference": {
            "type": "string",
            "example": "CS000000000NO"
          },
          "carrier_code": {
            "type": "string",
            "example": "bring"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-06-16T08:25:44.557+02:00"
          },
          "sender": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            }
          },
          "receiver": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Lene Hansen"
              },
              "address1": {
                "type": "string",
                "example": "Skibhusvej 52"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5000"
              },
              "city": {
                "type": "string",
                "example": "Odense C"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            }
          },
          "loading": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Lene Hansen"
              },
              "address1": {
                "type": "string",
                "example": "Skibhusvej 52"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5000"
              },
              "city": {
                "type": "string",
                "example": "Odense C"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "example": "2019-01-30T14:54:29+01:00"
              }
            }
          },
          "delivery": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            }
          },
          "shipment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 123456
              }
            }
          }
        }
      },
      "Create CMR Waybill Request": {
        "required": [
          "carrier_code",
          "loading",
          "packages",
          "receiver",
          "sender"
        ],
        "type": "object",
        "properties": {
          "carrier_code": {
            "type": "string",
            "example": "bring"
          },
          "sender": {
            "required": [
              "address1",
              "city",
              "country_code",
              "name",
              "zipcode"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            },
            "description": "Required"
          },
          "receiver": {
            "required": [
              "address1",
              "city",
              "country_code",
              "name",
              "zipcode"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Lene Hansen"
              },
              "address1": {
                "type": "string",
                "example": "Skibhusvej 52"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5000"
              },
              "city": {
                "type": "string",
                "example": "Odense C"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            },
            "description": "Required"
          },
          "loading": {
            "required": [
              "date"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Lene Hansen"
              },
              "address1": {
                "type": "string",
                "example": "Skibhusvej 52"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5000"
              },
              "city": {
                "type": "string",
                "example": "Odense C"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "example": "2019-01-30T14:54:29+01:00"
              }
            },
            "description": "Optional, except date. If all fields are not included Receiver is copied"
          },
          "delivery": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              }
            },
            "description": "Optional. If all fields are not included Sender is copied to these fields"
          },
          "packages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product_code": {
                  "type": "string",
                  "example": "BRI_PPB"
                },
                "package_type": {
                  "type": "string",
                  "example": "PARCEL"
                },
                "amount": {
                  "type": "integer",
                  "example": 3
                },
                "weight": {
                  "type": "integer",
                  "description": "Weight of pallet/parcels in grams",
                  "example": 1000
                }
              }
            }
          }
        }
      },
      "Pickup Request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 15242
          },
          "carrier_code": {
            "type": "string",
            "example": "ups"
          },
          "pickup_address": {
            "type": "object",
            "properties": {
              "company_name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              },
              "contact_name": {
                "type": "string",
                "example": "Hans Hansen"
              },
              "contact_phone": {
                "type": "string",
                "example": "70400407"
              }
            }
          },
          "confirmation_number": {
            "type": "string",
            "example": "123C21B215M"
          },
          "status": {
            "type": "string",
            "example": "confirmed"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T00:00:00+01:00"
          },
          "ready_by": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T09:00:00+01:00"
          },
          "closed_by": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T16:00:00+01:00"
          },
          "package_location": {
            "type": "string",
            "example": "Ved hoveddøren"
          },
          "number_of_pieces": {
            "type": "integer",
            "example": 3
          },
          "weight": {
            "type": "integer",
            "example": 47000
          },
          "is_residential": {
            "type": "boolean",
            "example": false
          },
          "shipments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 12515122
                }
              }
            }
          }
        }
      },
      "Pickup Request No Shipments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 15242
          },
          "carrier_code": {
            "type": "string",
            "example": "ups"
          },
          "pickup_address": {
            "type": "object",
            "properties": {
              "company_name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              },
              "contact_name": {
                "type": "string",
                "example": "Hans Hansen"
              },
              "contact_phone": {
                "type": "string",
                "example": "70400407"
              }
            }
          },
          "confirmation_number": {
            "type": "string",
            "example": "123C21B215M"
          },
          "status": {
            "type": "string",
            "example": "confirmed"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T00:00:00+01:00"
          },
          "ready_by": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T09:00:00+01:00"
          },
          "closed_by": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T16:00:00+01:00"
          },
          "package_location": {
            "type": "string",
            "example": "Ved hoveddøren"
          },
          "number_of_pieces": {
            "type": "integer",
            "example": 3
          },
          "weight": {
            "type": "integer",
            "example": 47000
          },
          "is_residential": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "Create Pickup Request Request": {
        "required": [
          "carrier_code",
          "closed_by",
          "package_location",
          "pickup_address",
          "ready_by"
        ],
        "type": "object",
        "properties": {
          "carrier_code": {
            "type": "string",
            "example": "ups"
          },
          "pickup_address": {
            "required": [
              "address1",
              "city",
              "company_name",
              "contact_name",
              "contact_phone",
              "country_code",
              "zipcode"
            ],
            "type": "object",
            "properties": {
              "company_name": {
                "type": "string",
                "example": "Min Virksomhed ApS"
              },
              "address1": {
                "type": "string",
                "example": "Strandvejen 6B"
              },
              "address2": {
                "type": "string"
              },
              "zipcode": {
                "type": "string",
                "example": "5240"
              },
              "city": {
                "type": "string",
                "example": "Odense NØ"
              },
              "country_code": {
                "type": "string",
                "example": "DK"
              },
              "contact_name": {
                "type": "string",
                "example": "Hans Hansen"
              },
              "contact_phone": {
                "type": "string",
                "example": "70400407"
              }
            },
            "description": "Required"
          },
          "package_location": {
            "type": "string",
            "example": "Ved hoveddøren"
          },
          "ready_by": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T09:00:00+01:00"
          },
          "closed_by": {
            "type": "string",
            "format": "date-time",
            "example": "2019-02-14T16:00:00+01:00"
          },
          "shipment_ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 12515122
            }
          },
          "is_residential": {
            "type": "boolean",
            "example": false
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "description": "HTTP Basic Authentication\n\nThe generated API User and API Key must be included in every calls to the API.\n\nFor example, if you have Aladdin as the username and OpenSesame as the password, then the field's value is the base64-encoding of Aladdin:OpenSesame, or QWxhZGRpbjpPcGVuU2VzYW1l. Then the Authorization header will appear as:\n\nAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\n\nYour API credentials usually look like this:\n\nUsername (API User): d8fb61fe-0a4f-4e11-81f8-6efd3513bd43\n\nPassword (API Key): 976ff6f2-3528-4f4f-9e7d-007e9a074037\n",
        "scheme": "basic"
      }
    }
  }
}